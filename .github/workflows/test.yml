name: Basic App Check

on:
  workflow_dispatch:

jobs:
  sanity-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install weaviate-client google-generativeai python-dotenv flask

      - name: Create test script
        run: |
          echo "import os" > test_app.py
          echo "from flask import Flask" >> test_app.py
          echo "from weaviate import WeaviateClient" >> test_app.py
          echo "from weaviate.auth import AuthApiKey" >> test_app.py
          echo "from weaviate.connect import ConnectionParams" >> test_app.py
          echo "import google.generativeai as genai" >> test_app.py
          echo "from dotenv import load_dotenv" >> test_app.py
          echo "" >> test_app.py
          echo "load_dotenv()" >> test_app.py
          echo "os.environ['WEAVIATE_URL'] = 'http://localhost:8080'" >> test_app.py
          echo "os.environ['WEAVIATE_API_KEY'] = ''" >> test_app.py
          echo "os.environ['GEMINI_API_KEY'] = 'dummy'" >> test_app.py
          echo "" >> test_app.py
          echo "client = WeaviateClient(connection_params=ConnectionParams.from_url(os.environ['WEAVIATE_URL']), auth_client=AuthApiKey(os.environ['WEAVIATE_API_KEY']))" >> test_app.py
          echo "genai.configure(api_key=os.environ['GEMINI_API_KEY'])" >> test_app.py
          echo "model = genai.GenerativeModel('gemini-pro')" >> test_app.py
          echo "app = Flask(__name__)" >> test_app.py
          echo "print('âœ… App initialized successfully')" >> test_app.py

      - name: Run test script
        run: python test_app.py
