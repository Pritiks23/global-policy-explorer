name: Validate Global Policy Explorer

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install google-generativeai

    - name: Simulate multiple user queries
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        python - <<EOF
        import os
        import google.generativeai as genai

        genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
        model = genai.GenerativeModel("gemini-pro")

        known_responses = {
            "What is the Paris Agreement?": "France agrees to reduce carbon emissions by 40% by 2030.",
            "What does the Kyoto Protocol require?": "Japan commits to reducing greenhouse gas emissions by 6% below 1990 levels.",
            "What is the Montreal Protocol?": "Countries agree to phase out ozone-depleting substances like CFCs.",
            "What is the role of the IPCC?": "The IPCC provides scientific assessments on climate change to inform policy decisions.",
            "What is COP26?": "COP26 focused on accelerating action toward the goals of the Paris Agreement.",
            "What is the Green Climate Fund?": "It helps developing countries finance climate mitigation and adaptation efforts."
        }

        queries = list(known_responses.keys()) + [
            "What is the Kigali Amendment?",
            "How does the EU Emissions Trading System work?"
        ]

        for i, query in enumerate(queries, 1):
            print(f"--- Query {i} ---")
            print(f"User query: {query}")
            response = known_responses.get(query)
            if response:
                print(f"Response: {response}\n")
            else:
                try:
                    gemini_response = model.generate_content(query)
                    print(f"Gemini response: {gemini_response.text}\n")
                except Exception as e:
                    print(f"Error fetching Gemini response: {e}\n")
        EOF
