name: Minimal Global Policy Query

on:
  workflow_dispatch:

jobs:
  query:
    runs-on: ubuntu-latest

    services:
      weaviate:
        image: semitechnologies/weaviate:latest
        ports:
          - 8080:8080
        options: >-
          --health-cmd "curl -f http://localhost:8080/v1/.well-known/ready || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          QUERY_DEFAULTS_LIMIT: 20
          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
          PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
          ENABLE_MODULES: 'text2vec-transformers'

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install weaviate-client google-generativeai python-dotenv

      - name: Run inline query
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python -u -c "
import os
import google.generativeai as genai
from weaviate import WeaviateClient
from weaviate.auth import AuthApiKey
from weaviate.connect import ConnectionParams

os.environ['WEAVIATE_URL'] = 'http://localhost:8080'
os.environ['WEAVIATE_API_KEY'] = ''
genai.configure(api_key=os.environ['GEMINI_API_KEY'])
model = genai.GenerativeModel('gemini-pro')

client = WeaviateClient(
    connection_params=ConnectionParams.from_url(os.environ['WEAVIATE_URL']),
    auth_client=AuthApiKey(os.environ['WEAVIATE_API_KEY'])
)

client.schema.create_class({
    'class': 'Clause',
    'vectorizer': 'none',
    'properties': [
        {'name': 'treaty_name', 'dataType': ['text']},
        {'name': 'country', 'dataType': ['text']},
        {'name': 'clause_text', 'dataType': ['text']}
    ]
})

client.data_object.create({
    'treaty_name': 'Paris Agreement',
    'country': 'France',
    'clause_text': 'France agrees to reduce carbon emissions by 40% by 2030.'
}, class_name='Clause', vector=[0.1]*768)

query = 'What is the Paris Agreement?'
response = client.query.get(
    class_name='Clause',
    properties=['treaty_name', 'country', 'clause_text']
).with_near_text({'concepts': [query]}).with_limit(5).do()

clauses = response['data']['Get']['Clause']
prompt = 'Summarize and compare the following policy clauses:\\n'
for clause in clauses:
    prompt += f\"- {clause['country']} ({clause['treaty_name']}): {clause['clause_text']}\\n\"

summary = model.generate_content(prompt).text
print('--- Clauses ---')
for clause in clauses:
    print(f\"{clause['country']} ({clause['treaty_name']}): {clause['clause_text']}\")
print('\\n--- Gemini Summary ---')
print(summary)
"
