name: Simulate Global Policy Query

on:
  workflow_dispatch:

jobs:
  simulate-query:
    runs-on: ubuntu-latest

    services:
      weaviate:
        image: semitechnologies/weaviate:latest
        ports:
          - 8080:8080
        options: >-
          --health-cmd "curl -f http://localhost:8080/v1/.well-known/ready || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          QUERY_DEFAULTS_LIMIT: 20
          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
          PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
          ENABLE_MODULES: 'text2vec-transformers'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install weaviate-client google-generativeai python-dotenv flask

      - name: Create simulation script
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "import os" > simulate.py
          echo "from dotenv import load_dotenv" >> simulate.py
          echo "import google.generativeai as genai" >> simulate.py
          echo "from weaviate import WeaviateClient" >> simulate.py
          echo "from weaviate.auth import AuthApiKey" >> simulate.py
          echo "from weaviate.connect import ConnectionParams" >> simulate.py
          echo "" >> simulate.py
          echo "os.environ['WEAVIATE_URL'] = 'http://localhost:8080'" >> simulate.py
          echo "os.environ['WEAVIATE_API_KEY'] = ''" >> simulate.py
          echo "os.environ['GEMINI_API_KEY'] = os.getenv('GEMINI_API_KEY')" >> simulate.py
          echo "" >> simulate.py
          echo "load_dotenv()" >> simulate.py
          echo "genai.configure(api_key=os.environ['GEMINI_API_KEY'])" >> simulate.py
          echo "model = genai.GenerativeModel('gemini-pro')" >> simulate.py
          echo "client = WeaviateClient(connection_params=ConnectionParams.from_url(os.environ['WEAVIATE_URL']), auth_client=AuthApiKey(os.environ['WEAVIATE_API_KEY']))" >> simulate.py
          echo "" >> simulate.py
          echo "# Create dummy schema and data" >> simulate.py
          echo "client.schema.create_class({" >> simulate.py
          echo "    'class': 'Clause'," >> simulate.py
          echo "    'vectorizer': 'none'," >> simulate.py
          echo "    'properties': [" >> simulate.py
          echo "        {'name': 'treaty_name', 'dataType': ['text']}," >> simulate.py
          echo "        {'name': 'country', 'dataType': ['text']}," >> simulate.py
          echo "        {'name': 'clause_text', 'dataType': ['text']}" >> simulate.py
          echo "    ]" >> simulate.py
          echo "})" >> simulate.py
          echo "" >> simulate.py
          echo "client.data_object.create({" >> simulate.py
          echo "    'treaty_name': 'Paris Agreement'," >> simulate.py
          echo "    'country': 'France'," >> simulate.py
          echo "    'clause_text': 'France agrees to reduce carbon emissions by 40% by 2030.'" >> simulate.py
          echo "}, class_name='Clause', vector=[0.1]*768)" >> simulate.py
          echo "" >> simulate.py
          echo "# Simulate query" >> simulate.py
          echo "query = 'What is the Paris Agreement?'" >> simulate.py
          echo "response = client.query.get(" >> simulate.py
          echo "    class_name='Clause'," >> simulate.py
          echo "    properties=['treaty_name', 'country', 'clause_text']" >> simulate.py
          echo ").with_near_text({'concepts': [query]}).with_limit(5).do()" >> simulate.py
          echo "" >> simulate.py
          echo "clauses = response['data']['Get']['Clause']" >> simulate.py
          echo "prompt = 'Summarize and compare the following policy clauses:\\n'" >> simulate.py
          echo "for clause in clauses:" >> simulate.py
          echo "    prompt += f\"- {clause['country']} ({clause['treaty_name']}): {clause['clause_text']}\\n\"" >> simulate.py
          echo "" >> simulate.py
          echo "gemini_response = model.generate_content(prompt)" >> simulate.py
          echo "summary = gemini_response.text" >> simulate.py
          echo "" >> simulate.py
          echo "print('--- Clauses ---')" >> simulate.py
          echo "for clause in clauses:" >> simulate.py
          echo "    print(f\"{clause['country']} ({clause['treaty_name']}): {clause['clause_text']}\")" >> simulate.py
          echo "print('\\n--- Gemini Summary ---')" >> simulate.py
          echo "print(summary)" >> simulate.py

      - name: Run simulation
        run: python simulate.py

